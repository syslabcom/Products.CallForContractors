Metadata-Version: 1.0
Name: Products.CallForContractors
Version: 1.1-r3134
Summary: OSHA Call For Contractors Content Type
Home-page: https://svn.syslab.com/svn/OSHA/Products.CallForContractors
Author: Syslab.com GmbH
Author-email: mailto:info@syslab.com
License: GPL
Description: .. contents::
        
        .. Note!
        -----
        
        - code repository
        - bug tracker
        - questions/comments feedback mail
        
        - Code repository: https://svn.syslab.com/svn/OSHA/Products.CallForContractors/trunk/
        - Questions and comments to mailto:info (at) syslab (dot) com
        - Report bugs at http://products.syslab.com/products
        
        
        Change history
        **************
        
        Changelog
        =========
        
        1.1 (2009-06-04)
        ----------------
        
        - Created recipe with ZopeSkel
        [pilz]
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This content type can be used to present various documents associated with a Call for Contractors. It is
        language-aware and has a language fallback.
        
        Boilerplate
        ===========
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the
        documentation, though, is in the underlying zope.testbrower package.
        
        >>> from Products.Five.testbrowser import Browser
        >>> browser = Browser()
        >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
        >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
        >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        >>> browser.open(portal_url)
        
        We have the login portlet, so let's use that.
        
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.
        
        We then test that we are still on the portal front page:
        
        >>> browser.url == portal_url
        True
        
        And we ensure that we get the friendly logged-in message:
        
        >>> "You are now logged in" in browser.contents
        True
        
        
        
        Adding a CallForContractors
        ===================
        
        We add a Case Study and make sure the id is set correctly.
        >>> _ = self.folder.invokeFactory(type_name='CallForContractors', id='mycfc')
        >>> mycfc = self.folder.mycfc
        >>> mycfc.getId()
        'mycfc'
        
        For good measure, we also set a title and test for it.
        >>> mycfc.setTitle('My Call for Contractors')
        >>> mycfc.Title()
        'My Call for Contractors'
        
        
        Contributors
        ************
        
        - Wolfgang Thomas, Syslab.com
        - Alexander Pilz, Syslab.com
        
        
        Download
        ********
        
Keywords: Call for Contractors contenttype
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
